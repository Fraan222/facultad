funcion1 int = case int of
	1 -> 38
	2 -> 252
	3 -> 39

funcion2 peso codigo | codigo == 1 = funcion1 codigo * peso
		     | codigo == 2 = funcion1 codigo * peso
		     | codigo == 3 = funcion1 codigo * peso

funcion3 [ ] _ = 0
funcion3(h:t) peso | h <= peso = h + funcion3 t peso
		   | otherwise =  0 + funcion3 t peso 

funcion4 int = case int of 
	1 -> 3
	2 -> 5
	3 -> 7
	otherwise -> 0

funcion5 [ ] _ _ = [ ]
funcion5(h:t) menor mayor | h > menor && h < mayor = h:funcion5 t menor mayor
			  | otherwise = funcion5 t menor mayor


cantidad[ ]_ = 0
cantidad(h:t) p | h > p && even h = 1 + cantidad t
		| otherwise = 0 + cantidad t

suma [ ]_ = 0
suma(h:t) p | h > p && even h = h + cantidad t
	    | otherwise = 0 + cantidad t

promedio lista = fromIntegral(suma lista / cantidad lista) 
